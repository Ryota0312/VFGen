#!/usr/bin/env python3
## 仮想フォルダの生成
import yaml
import os
import datetime
import shutil
import sys
import logging.config
app_home = os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)) , ".." ))
sys.path.append(os.path.join(app_home,"lib"))
from AccessLogAnalyzer import *
from Clustering import *
from dir2vec import *
import csvdb

#App logger
logging.config.fileConfig(app_home + '/logging.conf')
logger = logging.getLogger()

# 設定ファイルのロード
try:
    settings = yaml.load(open(app_home + '/settings.yml','r'), Loader=yaml.SafeLoader)
except:
    print("Error: Cannnot open log file. Check your settings.")
    logger.error("Cannnot open log file. Check your settings.")
    sys.exit()

dst = settings["VIRTUAL_FOLDER_PATH"]
if not os.path.exists(dst): os.makedirs(dst)

db = csvdb.Database(settings["DB_PATH"])
wds = {}
for i, l in enumerate(db.data):
    wds[l[0]] = eval(l[1])

## 使用時期別
recent_path = dst + "/" + settings["VIRTUAL_FOLDER_NAME"]["RECENT"]
if os.path.exists(recent_path): shutil.rmtree(recent_path)
if not os.path.exists(recent_path): os.makedirs(recent_path)
for m in range(1,13):
    for d in wds.keys():
        if dst in d: continue
        for at in wds[d]:
            # 月別
            if at[0].month <= m and at[1].month >= m:
                path = dst + "/" + settings["VIRTUAL_FOLDER_NAME"]["USED"] + "/" + str(at[0].year) + "/" + str(m).rjust(2, '0')
                if not os.path.exists(path): os.makedirs(path)
                try:
                    if not os.path.exists(path + "/" + d.split("/")[-1]): os.symlink(d, path + "/" + d.split("/")[-1])
                except:
                    print("Warning:" + path + "/" + d.split("/")[-1] + " cannot make symlink")
                    logger.warning(path + "/" + d.split("/")[-1] + " cannot make symlink")
            # 最近
            if at[0] > (datetime.datetime.now() - datetime.timedelta(days=21)):
                try:
                    if not os.path.exists(recent_path + "/" + d.split("/")[-1]): os.symlink(d, recent_path + "/" + d.split("/")[-1])
                except:
                    print("Warning:" + recent_path + "/" + d.split("/")[-1] + " cannot make symlink")
                    logger.warning(recent_path + "/" + d.split("/")[-1] + " cannot make symlink")

features = {}
for i, l in enumerate(db.data):
    features[l[0]] = eval(l[2])

pca_n = settings['CLUSTERING_SETTINGS']['pca_nconponents']    
vectorizer = Dir2Vec(list(features.keys()), None, pca_ncomponents=pca_n)
dirlist, vector = vectorizer.genvec_from_features(list(features.values()))

# クラスタリング
div_threshold = settings['CLUSTERING_SETTINGS']['div_threshold']
is_save_dendrogram = settings['CLUSTERING_SETTINGS']['save_dendrogram']
ch = ClusterHierarchy(dirlist, vector[:,], None)
ch.linkage(metric='cosine')
ch.div(div_threshold)
if is_save_dendrogram: ch.save_dendrogram()

cluster = ch.get_cluster()

## 作業別    
cluster_path = dst + "/" + settings["VIRTUAL_FOLDER_NAME"]["CLUSTERING"] + "/"
if os.path.exists(cluster_path): shutil.rmtree(cluster_path)
if not os.path.exists(cluster_path): os.makedirs(cluster_path)
for i,c in enumerate(cluster):
    cpath = cluster_path + "/Task" + str(i)
    if not os.path.exists(cpath): os.makedirs(cpath)
    for d in c:
        if not os.path.exists(cpath + "/" + d.split("/")[-1]): os.symlink(d, cpath + "/" + d.split("/")[-1])

logger.info("Create Virtual Folders")
