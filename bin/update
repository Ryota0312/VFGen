#!./env/bin/python3

import sys
import yaml
import os
import datetime
import numpy as np
import logging.config
app_home = os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)) , ".." ))
sys.path.append(os.path.join(app_home,"lib"))
from AccessLogAnalyzer import *
from  WDEstimator import *
from dir2vec import *
import csvdb

#App logger
logging.config.fileConfig(app_home + '/logging.conf')
logger = logging.getLogger()

try:
    settings = yaml.load(open(app_home + '/settings.yml','r'), Loader=yaml.SafeLoader)
except:
    print("Error: Cannnot open log file. Check your settings.")
    sys.exit()

logfile = settings['ACCESS_LOG_FILE_PATH']
db = csvdb.Database(settings["DB_PATH"])
    
try:
    print("Loading", flush=True)
    logs = LogParser(sep=",")
    if os.path.exists(app_home + "/log.pickle"):
        logs.load()
        logs.update(logfile)
        logs.dump()
    else:
        logs.parse(logfile)
        logs.dump()
    print("Loaded",len(logs.log),"logs")
except:
    print("Error: Failed to load log dump data. ")
    sys.exit()

# 前回の更新日時を取得
prev_date = "initial"
with open(app_home + "/log/app_log") as f:
    for line in reversed(list(f)):
        if "INFO:Update WD" in line:
            prev_date =  datetime.datetime.strptime(line.split(",")[0], "%Y-%m-%d %H:%M:%S")

if not prev_date == "initial":
    now_date = datetime.datetime.now()
    records = logs.log.op_filter("\ACreated\Z|\AUpdated\Z").time_filter(prev_date, now_date)
else:
    now_date = datetime.datetime.now()
    records = logs.log.op_filter("\ACreated\Z|\AUpdated\Z")
if len(records) == 0: sys.exit(0)

first = records[0].timestamp
tail = records[-1].timestamp
start = datetime.datetime(first.year, first.month, first.day, 0, 0, 0)
end = datetime.datetime(first.year, first.month, first.day, 23, 59, 59)
while(True):
    # 1日分
    oneday_rec = records.time_filter(start, end)
    if len(oneday_rec) == 0:
        start += datetime.timedelta(days=1)
        if start > tail: break
        end += datetime.timedelta(days=1)
        continue
    
    # WD推定
    weight = settings['WD_DISCOVER_SETTINGS']['weight']
    threshold = settings['WD_DISCOVER_SETTINGS']['threshold']
    wd = WDEstimator(oneday_rec, weight, threshold)

    # 特徴抽出
    pca_n = settings['CLUSTERING_SETTINGS']['pca_nconponents']
    vectorizer = Dir2Vec(wd.workingdir, oneday_rec, pca_ncomponents=pca_n)
    features = vectorizer.get_features_from_timelines(wd.timelines_idx)

    # DBへ書き込み
    for d in wd.workingdir:
        tl = db.get(d) + wd.timelines[d]
        ft = db.get(d) + list(features[d])
        db.update(d, str(tl), str(ft))

    # 1日ずらす
    start += datetime.timedelta(days=1)
    if start > tail: break
    end += datetime.timedelta(days=1)

# 更新した日時を記録
logger.info("Update WD")
